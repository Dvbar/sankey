 /*eslint-env es6*/
 /*eslint-env browser*/
 /*eslint no-console: 0*/
 /*global d3 */
 ///* ------

//The sites I have used to understand how to make a sankey diagram
//and what d3.sankey does
//https://observablehq.com/@d3/sankey-diagram
//https://github.com/d3/d3-sankey/blob/master/README.md#_sankey
//http://www.d3noob.org/2013/02/formatting-data-for-sankey-diagrams-in.html
//https://jarrettmeyer.com/2018/05/31/creating-a-d3-sankey-graph

// set the dimensions and margins of the graph
 var margin = {
         top: 10,
         right: 90,
         bottom: 20,
         left: 10
     },
     width = 700 - margin.left - margin.right,
     height = 300 - margin.top - margin.bottom;


    var color = d3.scaleOrdinal(d3.schemeCategory10);

 // append the svg object to the body of the page
 var svg = d3.select("body").append("svg")
     .attr("width", width + margin.left + margin.right)
     .attr("height", height + margin.top + margin.bottom)
     .append("g")
     .attr("transform",
         "translate(" + margin.left + "," + margin.top + ")");

 // Set the sankey diagram properties
 var sankey = d3.sankey()//basic properties that are assigned to the diagram
        //each .something()returns the sankey generator
     .nodeWidth(20) // width of each node
     .nodePadding(30)
     .size([width, height]); // size of the entire diagram


d3.json("data.json").then(function(data) {

    //just need to pass the formatted data into sankey
    //Sankey will compute the nodes and links positions 
    //and will return a graph representing the Sankey layout.
    sankey(data);
    //number of iterations the generator will
    //go through to update the layout
    console.log("sankey(data)",     sankey(data));

    console.log("sankey(data).nodes", sankey(data).nodes);
    //shows how the data is generated by sankey
    console.log("sankey(data).links", sankey(data).links);

     //add in the links
    //append svg elements for our links based on the data in data.links

     var link = svg.append("g")
            .selectAll(".link")
         .data(sankey(data).links)
         .enter()
        .append("path")
         .attr("class", "link")
         .attr("d", d3.sankeyLinkHorizontal())//Returns a new link generator with horizontal tangents 
     //draws the links between the nodes 
     // generates a link from a source point to a target point.
         .style("stroke-width", function (d) {
             console.log("width", d.width);
             //Math.max will return the highest value, either 1 or 
             //the width associated with that link 
             return Math.max(1, d.width);
         })
     
        
     // add the link titles
     //can put the value of it
     //or names of the nodes it connects
     link.append("title")
         .text(function (d) {
             return d.value ;
         });

     // add in the nodes by appending another svg element
     var node = svg.append("g").selectAll(".node")
         .data(sankey(data).nodes)
         .enter()
         .append("g")
         .attr("class", "node")
     //transform to position the nodes 
         .attr("transform", function (d) {
             return "translate(" + (d.x0) + "," + d.y0 + ")";
         });
         

     //create the rectangles for the nodes
    //setting the height
    //and the width determined and returned by sankey
    //when we made our sankey class
    //we fill in each rectangle with its own color 
    //add a small tooltip when we hover over it
     node.append("rect")
        .attr("height", function (d) { //size/height bottom - top
             return d.y1 - d.y0;
         })
        .attr("width", function (d) { // size/width right-left
             return d.x1 - d.x0;
         })
         .style("fill", function (d) {
             return d.color = color(d.node);
         })
         .append("title")
         .text(function (d) {
             return d.name +"\n"+d.value;
         });

     // add in the title for the nodes
     node.append("text")
         .attr("x", 0)
         .attr("y", function (d) { //position text below the nodes
             return d.y1 - d.y0 +8;
         })
         .attr("dy", ".35em")
         .attr("text-anchor", "center")
         .attr("transform", null)
         .text(function(d) { return d.name; });
 });
